# Checking the satyr. -*- Autotest -*-

AT_BANNER([Kerneloops stacktraces])

## --------------------------------- ##
## sr_koops_stacktrace_parse_modules ##
## --------------------------------- ##
AT_TESTFUN([sr_koops_stacktrace_parse_modules],
[[
#include <lib/koops_stacktrace.h>
#include <assert.h>
#include <stdlib.h>

static void
check(bool success,
      char *input,
      char **expected_modules)
{
    char *old_input = input;
    char **modules = sr_koops_stacktrace_parse_modules(&input);
    assert(!!modules == success);

    if (modules)
    {
	int offset = 0;
	while (modules[offset])
        {
            assert(expected_modules[offset]);
	    assert(0 == strcmp(modules[offset], expected_modules[offset]));
	    ++offset;
        }
	assert(!expected_modules[offset]);

	offset = 0;
	while (modules[offset])
        {
    	    free(modules[offset]);
	    ++offset;
	}

	free(modules);
    }
    else
    {
        /* Check that the pointer is not moved. */
        assert(old_input == input);
    }
}

int
main(void)
{
    char *modules[] = { "vfat", "fat", "usb_storage", NULL };
    check(true,
          "[110417.280431] Modules linked in: vfat fat usb_storage",
	  modules);

    check(true,
          "[110417.280431] Modules linked in: vfat fat usb_storage [last unloaded: scsi_wait_scan]\n",
          modules);

    check(true,
          "[110417.280431] Modules linked in: vfat fat usb_storage \n[last unloaded: scsi_wait_scan]\n",
          modules);

    check(true,
          "[110417.280431] Modules linked in: vfat fat usb_storage\n [last unloaded: scsi_wait_scan]\n",
          modules);

    check(true,
          "[110417.280431] Modules linked in: vfat fat usb_st\norage [last unloaded: scsi_wait_scan]\n",
          modules);

    check(true,
          "[110417.280431] Modules linked in: vfat fat \nusb_storage [last unloaded: scsi_wait_scan]\n",
          modules);

    check(true,
          "[110417.280431] Modules linked in: vfat fat\n usb_storage [last unloaded: scsi_wait_scan]\n",
          modules);

    check(true,
          "[110417.280431] Modules linked in: vfat fat usb_storage\n"
          "Pid: 31337, comm: ksoftirqd/2\n",
          modules);

    check(false, "[110417.280434] I hate autotest", modules);

    return 0;
}
]])

## ------------------------- ##
## sr_koops_stacktrace_parse ##
## ------------------------- ##

AT_TESTFUN([sr_koops_stacktrace_parse],
[[
#include <lib/koops_stacktrace.h>
#include <lib/koops_frame.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

static void
check(const char *path,
      const char *first_function_name,
      const char *last_function_name,
      int frame_count)
{
  char *error_message;
  char *full_input = sr_file_to_string(path, &error_message);
  assert(full_input);
  char *input = full_input;

  struct sr_location location;
  sr_location_init(&location);
  struct sr_koops_stacktrace *stacktrace =
      sr_koops_stacktrace_parse(&input, &location);

  assert(stacktrace);
  assert(*input == '\0');

  if (stacktrace->frames)
  {
      assert(0 == sr_strcmp0(stacktrace->frames->function_name, first_function_name));

      struct sr_koops_frame *last = stacktrace->frames;
      while (last->next)
          last = last->next;

      assert(0 == sr_strcmp0(last->function_name, last_function_name));
  }
  else
      assert(!first_function_name && !last_function_name && 0 == frame_count);

  printf("expected: %d, got: %d\n", frame_count, sr_koops_stacktrace_get_frame_count(stacktrace));
  assert(frame_count == sr_koops_stacktrace_get_frame_count(stacktrace));

  char *reason = sr_koops_stacktrace_get_reason(stacktrace);
  assert(reason);
  free(reason);

  sr_koops_stacktrace_free(stacktrace);
  free(full_input);
}

int
main(void)
{
  check("../../kerneloopses/gitlog-01", "unwind_backtrace", "kthread", 15);
  check("../../kerneloopses/gitlog-02", "unwind_backtrace", "cpu_idle", 27);
  check("../../kerneloopses/gitlog-03", "lockdep_rcu_suspicious", "system_call_fastpath", 19);
  check("../../kerneloopses/gitlog-04", "lockdep_rcu_suspicious", "addrconf_forward_change", 7);
  check("../../kerneloopses/gitlog-05", "mark_held_locks", "sysenter_do_call", 26);
  check("../../kerneloopses/gitlog-06", "lock_acquire", "kernel_thread_helper", 23);
  check("../../kerneloopses/gitlog-07", "__slab_alloc.isra.50.constprop.56", "sysenter_do_call", 14);
  check("../../kerneloopses/gitlog-08", "unwind_backtrace", "sys_write", 13);

  check("../../kerneloopses/gitlog-09", "unwind_backtrace", "cpu_idle", 11);
  check("../../kerneloopses/gitlog-10", NULL, NULL, 0);
  check("../../kerneloopses/gitlog-11", "lockdep_rcu_suspicious", "out_of_memory", 12);
  check("../../kerneloopses/gitlog-12", "unwind_backtrace", "regulator_get_voltage", 6);
/*
  check("../../kerneloopses/gitlog-13", "", "", 0);
  check("../../kerneloopses/gitlog-14", "", "", 0);
  check("../../kerneloopses/gitlog-15", "", "", 0);
  check("../../kerneloopses/gitlog-16", "", "", 0);
  check("../../kerneloopses/gitlog-17", "", "", 0);
  check("../../kerneloopses/gitlog-18", "", "", 0);
  check("../../kerneloopses/gitlog-19", "", "", 0);
  check("../../kerneloopses/gitlog-20", "", "", 0);
  check("../../kerneloopses/gitlog-21", "", "", 0);
  check("../../kerneloopses/gitlog-22", "", "", 0);
  check("../../kerneloopses/gitlog-23", "", "", 0);
  check("../../kerneloopses/gitlog-24", "", "", 0);
  check("../../kerneloopses/gitlog-25", "", "", 0);
  check("../../kerneloopses/gitlog-26", "", "", 0);
  check("../../kerneloopses/gitlog-27", "", "", 0);
  check("../../kerneloopses/gitlog-28", "", "", 0);
  check("../../kerneloopses/gitlog-29", "", "", 0);
  check("../../kerneloopses/gitlog-30", "", "", 0);
  check("../../kerneloopses/gitlog-31", "", "", 0);
*/

  check("../../kerneloopses/rhbz-827868", "warn_slowpath_common", "gs_change", 32);
  check("../../kerneloopses/rhbz-836206", "__might_sleep", "system_call_fastpath", 23);
  return 0;
}
]])

## --------------------------- ##
## sr_koops_stacktrace_to_json ##
## --------------------------- ##
AT_TESTFUN([sr_koops_stacktrace_to_json],
[[
#include <lib/koops_stacktrace.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  char *error_message;
  char *full_input = sr_file_to_string("../../kerneloopses/rhbz-827868",
                                        &error_message);

  assert(full_input);
  char *input = full_input;

  struct sr_location location;
  sr_location_init(&location);
  struct sr_koops_stacktrace *stacktrace =
      sr_koops_stacktrace_parse(&input, &location);

  assert(stacktrace);
  assert(*input == '\0');
  free(full_input);

  char *json = sr_koops_stacktrace_to_json(stacktrace);
  puts(json);
  assert(0 == strcmp(json,
    "{   \"taint_module_proprietary\": false\n"
    ",   \"taint_module_gpl\": false\n"
    ",   \"taint_module_out_of_tree\": false\n"
    ",   \"taint_forced_module\": false\n"
    ",   \"taint_forced_removal\": false\n"
    ",   \"taint_smp_unsafe\": false\n"
    ",   \"taint_mce\": false\n"
    ",   \"taint_page_release\": false\n"
    ",   \"taint_userspace\": false\n"
    ",   \"taint_died_recently\": false\n"
    ",   \"taint_acpi_overridden\": false\n"
    ",   \"taint_warning\": false\n"
    ",   \"taint_staging_driver\": false\n"
    ",   \"taint_firmware_workaround\": false\n"
    ",   \"taint_virtual_box\": false\n"
    ",   \"modules\":\n"
    "      [ \"vfat\"\n"
    "      , \"fat\"\n"
    "      , \"usb_storage\"\n"
    "      , \"authenc\"\n"
    "      , \"l2tp_ppp\"\n"
    "      , \"pppox\"\n"
    "      , \"ppp_generic\"\n"
    "      , \"slhc\"\n"
    "      , \"l2tp_netlink\"\n"
    "      , \"l2tp_core\"\n"
    "      , \"rmd160\"\n"
    "      , \"crypto_null\"\n"
    "      , \"camellia\"\n"
    "      , \"lzo\"\n"
    "      , \"cast6\"\n"
    "      , \"cast5\"\n"
    "      , \"deflate\"\n"
    "      , \"zlib_deflate\"\n"
    "      , \"cts\"\n"
    "      , \"gcm\"\n"
    "      , \"ccm\"\n"
    "      , \"serpent_sse2_x86_64\"\n"
    "      , \"serpent_generic\"\n"
    "      , \"blowfish_generic\"\n"
    "      , \"blowfish_x86_64\"\n"
    "      , \"blowfish_common\"\n"
    "      , \"twofish_generic\"\n"
    "      , \"twofish_x86_64_3way\"\n"
    "      , \"lrw\"\n"
    "      , \"twofish_x86_64\"\n"
    "      , \"twofish_common\"\n"
    "      , \"xcbc\"\n"
    "      , \"sha256_generic\"\n"
    "      , \"sha512_generic\"\n"
    "      , \"des_generic\"\n"
    "      , \"ah6\"\n"
    "      , \"ah4\"\n"
    "      , \"esp6\"\n"
    "      , \"esp4\"\n"
    "      , \"xfrm4_mode_beet\"\n"
    "      , \"xfrm4_tunnel\"\n"
    "      , \"tunnel4\"\n"
    "      , \"xfrm4_mode_tunnel\"\n"
    "      , \"xfrm4_mode_transport\"\n"
    "      , \"xfrm6_mode_transport\"\n"
    "      , \"xfrm6_mode_ro\"\n"
    "      , \"xfrm6_mode_beet\"\n"
    "      , \"xfrm6_mode_tunnel\"\n"
    "      , \"ipcomp\"\n"
    "      , \"ipcomp6\"\n"
    "      , \"xfrm_ipcomp\"\n"
    "      , \"xfrm6_tunnel\"\n"
    "      , \"tunnel6\"\n"
    "      , \"af_key\"\n"
    "      , \"snd_usb_audio\"\n"
    "      , \"snd_usbmidi_lib\"\n"
    "      , \"snd_rawmidi\"\n"
    "      , \"sctp\"\n"
    "      , \"libcrc32c\"\n"
    "      , \"tcp_lp\"\n"
    "      , \"wacom\"\n"
    "      , \"fuse\"\n"
    "      , \"lockd\"\n"
    "      , \"rfcomm\"\n"
    "      , \"bnep\"\n"
    "      , \"snd_hda_codec_hdmi\"\n"
    "      , \"snd_hda_codec_idt\"\n"
    "      , \"binfmt_misc\"\n"
    "      , \"arc4\"\n"
    "      , \"uvcvideo\"\n"
    "      , \"snd_hda_intel\"\n"
    "      , \"videobuf2_core\"\n"
    "      , \"videodev\"\n"
    "      , \"snd_hda_codec\"\n"
    "      , \"ppdev\"\n"
    "      , \"media\"\n"
    "      , \"dell_wmi\"\n"
    "      , \"videobuf2_vmalloc\"\n"
    "      , \"sparse_keymap\"\n"
    "      , \"videobuf2_memops\"\n"
    "      , \"dell_laptop\"\n"
    "      , \"snd_hwdep\"\n"
    "      , \"snd_seq\"\n"
    "      , \"uinput\"\n"
    "      , \"dcdbas\"\n"
    "      , \"snd_seq_device\"\n"
    "      , \"btusb\"\n"
    "      , \"bluetooth\"\n"
    "      , \"iwlwifi\"\n"
    "      , \"snd_pcm\"\n"
    "      , \"parport_pc\"\n"
    "      , \"joydev\"\n"
    "      , \"parport\"\n"
    "      , \"snd_timer\"\n"
    "      , \"microcode\"\n"
    "      , \"mac80211\"\n"
    "      , \"snd\"\n"
    "      , \"soundcore\"\n"
    "      , \"snd_page_alloc\"\n"
    "      , \"i2c_i801\"\n"
    "      , \"cfg80211\"\n"
    "      , \"iTCO_wdt\"\n"
    "      , \"iTCO_vendor_support\"\n"
    "      , \"rfkill\"\n"
    "      , \"e1000e\"\n"
    "      , \"sunrpc\"\n"
    "      , \"xts\"\n"
    "      , \"gf128mul\"\n"
    "      , \"dm_crypt\"\n"
    "      , \"sdhci_pci\"\n"
    "      , \"sdhci\"\n"
    "      , \"mmc_core\"\n"
    "      , \"wmi\"\n"
    "      , \"i915\"\n"
    "      , \"drm_kms_helper\"\n"
    "      , \"drm\"\n"
    "      , \"i2c_algo_bit\"\n"
    "      , \"i2c_core\"\n"
    "      , \"video\" ]\n"
    ",   \"frames\":\n"
    "      [ {   \"address\": 18446744071579204319\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"warn_slowpath_common\"\n"
    "        ,   \"function_offset\": 127\n"
    "        ,   \"function_length\": 192\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071579204410\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"warn_slowpath_null\"\n"
    "        ,   \"function_offset\": 26\n"
    "        ,   \"function_length\": 32\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580063441\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"__alloc_pages_nodemask\"\n"
    "        ,   \"function_offset\": 561\n"
    "        ,   \"function_length\": 2288\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071584218496\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"ip_copy_metadata\"\n"
    "        ,   \"function_offset\": 448\n"
    "        ,   \"function_length\": 448\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071584217184\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"ip_forward_options\"\n"
    "        ,   \"function_offset\": 496\n"
    "        ,   \"function_length\": 496\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580289683\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"alloc_pages_current\"\n"
    "        ,   \"function_offset\": 163\n"
    "        ,   \"function_length\": 272\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580046612\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"__get_free_pages\"\n"
    "        ,   \"function_offset\": 20\n"
    "        ,   \"function_length\": 80\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580334943\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"kmalloc_order_trace\"\n"
    "        ,   \"function_offset\": 63\n"
    "        ,   \"function_length\": 208\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580338823\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"__kmalloc\"\n"
    "        ,   \"function_offset\": 375\n"
    "        ,   \"function_length\": 416\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744072105501490\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"pppol2tp_xmit\"\n"
    "        ,   \"function_offset\": 66\n"
    "        ,   \"function_length\": 544\n"
    "        ,   \"module_name\": \"l2tp_ppp\"\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071583936679\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"pskb_expand_head\"\n"
    "        ,   \"function_offset\": 135\n"
    "        ,   \"function_length\": 784\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580146777\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"__mod_zone_page_state\"\n"
    "        ,   \"function_offset\": 73\n"
    "        ,   \"function_length\": 80\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071583932661\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"kfree_skb\"\n"
    "        ,   \"function_offset\": 69\n"
    "        ,   \"function_length\": 192\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744072105501917\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"pppol2tp_xmit\"\n"
    "        ,   \"function_offset\": 493\n"
    "        ,   \"function_length\": 544\n"
    "        ,   \"module_name\": \"l2tp_ppp\"\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744072105418075\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"ppp_push\"\n"
    "        ,   \"function_offset\": 347\n"
    "        ,   \"function_length\": 1616\n"
    "        ,   \"module_name\": \"ppp_generic\"\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071583937124\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"pskb_expand_head\"\n"
    "        ,   \"function_offset\": 580\n"
    "        ,   \"function_length\": 784\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580059147\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"free_compound_page\"\n"
    "        ,   \"function_offset\": 27\n"
    "        ,   \"function_length\": 32\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580078163\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"__put_compound_page\"\n"
    "        ,   \"function_offset\": 35\n"
    "        ,   \"function_length\": 48\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071580078549\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"put_compound_page\"\n"
    "        ,   \"function_offset\": 293\n"
    "        ,   \"function_length\": 448\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744072105420959\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"ppp_xmit_process\"\n"
    "        ,   \"function_offset\": 1135\n"
    "        ,   \"function_length\": 1632\n"
    "        ,   \"module_name\": \"ppp_generic\"\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744072105421768\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"ppp_start_xmit\"\n"
    "        ,   \"function_offset\": 312\n"
    "        ,   \"function_length\": 464\n"
    "        ,   \"module_name\": \"ppp_generic\"\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071583991218\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"dev_hard_start_xmit\"\n"
    "        ,   \"function_offset\": 818\n"
    "        ,   \"function_length\": 1744\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071584105594\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"sch_direct_xmit\"\n"
    "        ,   \"function_offset\": 250\n"
    "        ,   \"function_length\": 464\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071584105974\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"__qdisc_run\"\n"
    "        ,   \"function_offset\": 166\n"
    "        ,   \"function_length\": 304\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071583983747\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"net_tx_action\"\n"
    "        ,   \"function_offset\": 227\n"
    "        ,   \"function_length\": 496\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071579234504\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"__do_softirq\"\n"
    "        ,   \"function_offset\": 184\n"
    "        ,   \"function_length\": 560\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071579235066\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"run_ksoftirqd\"\n"
    "        ,   \"function_offset\": 186\n"
    "        ,   \"function_length\": 368\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071579234880\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"__do_softirq\"\n"
    "        ,   \"function_offset\": 560\n"
    "        ,   \"function_length\": 560\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071579344291\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"kthread\"\n"
    "        ,   \"function_offset\": 147\n"
    "        ,   \"function_length\": 160\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071585126628\n"
    "        ,   \"reliable\": true\n"
    "        ,   \"function_name\": \"kernel_thread_helper\"\n"
    "        ,   \"function_offset\": 4\n"
    "        ,   \"function_length\": 16\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071579344144\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"kthread_freezable_should_stop\"\n"
    "        ,   \"function_offset\": 112\n"
    "        ,   \"function_length\": 112\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        }\n"
    "      , {   \"address\": 18446744071585126624\n"
    "        ,   \"reliable\": false\n"
    "        ,   \"function_name\": \"gs_change\"\n"
    "        ,   \"function_offset\": 19\n"
    "        ,   \"function_length\": 19\n"
    "        ,   \"from_function_offset\": 0\n"
    "        ,   \"from_function_length\": 0\n"
    "        } ]\n"
    "}"));

  sr_koops_stacktrace_free(stacktrace);
  free(json);
  return 0;
}
]])
