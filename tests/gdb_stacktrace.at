# Checking the btparser. -*- Autotest -*-

AT_BANNER([GDB stacktraces])

## -------------------------------------------- ##
## btp_gdb_stacktrace_remove_threads_except_one ##
## -------------------------------------------- ##
AT_TESTFUN([btp_gdb_stacktrace_remove_threads_except_one],
[[
#include <lib/gdb_stacktrace.h>
#include <lib/gdb_thread.h>
#include <assert.h>
#include <stdlib.h>

int
main(void)
{
  /* Delete the thread except the middle one. */
  struct btp_gdb_thread *thread2 = btp_gdb_thread_new();
  struct btp_gdb_thread *thread1 = btp_gdb_thread_new();
  thread1->next = thread2;
  struct btp_gdb_thread *thread0 = btp_gdb_thread_new();
  thread0->next = thread1;
  struct btp_gdb_stacktrace *stacktrace = btp_gdb_stacktrace_new();
  stacktrace->threads = thread0;
  btp_gdb_stacktrace_remove_threads_except_one(stacktrace, thread1);
  assert(stacktrace->threads == thread1);
  assert(NULL == stacktrace->threads->next);

  /* Delete all threads except one when there is only one. */
  btp_gdb_stacktrace_remove_threads_except_one(stacktrace, thread1);
  assert(stacktrace->threads == thread1);
  assert(NULL == stacktrace->threads->next);

  /* Delete all threads except the first one. */
  thread0 = btp_gdb_thread_new();
  stacktrace->threads = thread0;
  thread0->next = thread1; // already exists
  thread2 = btp_gdb_thread_new();
  thread1->next = thread2;
  btp_gdb_stacktrace_remove_threads_except_one(stacktrace, thread0);
  assert(stacktrace->threads == thread0);
  assert(NULL == stacktrace->threads->next);

  /* Delete all threads except the last one. */
  thread1 = btp_gdb_thread_new();
  thread0->next = thread1;
  thread2 = btp_gdb_thread_new();
  thread1->next = thread2;
  btp_gdb_stacktrace_remove_threads_except_one(stacktrace, thread2);
  assert(stacktrace->threads == thread2);
  assert(NULL == stacktrace->threads->next);

  btp_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])

## ------------------------------------ ##
## btp_gdb_stacktrace_find_crash_thread ##
## ------------------------------------ ##
AT_TESTFUN([btp_gdb_stacktrace_find_crash_thread],
[
#include <lib/gdb_stacktrace.h>
#include <lib/gdb_thread.h>
#include <lib/gdb_frame.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>

void
check(const char *path, const char *first_thread_function_name)
{
  /* Load the stacktrace from a file. */
  struct btp_location location;
  btp_location_init(&location);
  char *full_input = btp_file_to_string(path);
  assert(full_input);
  char *input = full_input;
  struct btp_gdb_stacktrace *stacktrace = btp_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);

  /* Check that the crash thread is found. */
  struct btp_gdb_thread *crash_thread = btp_gdb_stacktrace_find_crash_thread(stacktrace);
  assert(crash_thread);
  assert(0 == strcmp(crash_thread->frames->function_name, first_thread_function_name));
  btp_gdb_stacktrace_free(stacktrace);
  free(full_input);
  return 0;
}

int
main(void)
{
  /* Test the stacktrace from Red Hat Bugzilla bug #621492. */
  check("../../gdb_stacktraces/rhbz-621492", "raise");
  /* Test the stacktrace from Red Hat Bugzilla bug #803600. */
  check("../../gdb_stacktraces/rhbz-803600", "validate_row");
  return 0;
}
])

## ------------------------------------ ##
## btp_gdb_stacktrace_limit_frame_depth ##
## ------------------------------------ ##
AT_TESTFUN([btp_gdb_stacktrace_limit_frame_depth],
[[
#include <lib/gdb_stacktrace.h>
#include <lib/gdb_thread.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>

int
main(void)
{
  /* Load the stacktrace from Red Hat Bugzilla bug #621492. */
  struct btp_location location;
  btp_location_init(&location);
  char *full_input = btp_file_to_string("../../gdb_stacktraces/rhbz-621492");
  assert(full_input);
  char *input = full_input;
  struct btp_gdb_stacktrace *stacktrace = btp_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);

  /* Check the frame depth limit. */
  btp_gdb_stacktrace_limit_frame_depth(stacktrace, 5);
  assert(11 == btp_gdb_stacktrace_get_thread_count(stacktrace));
  struct btp_gdb_thread *thread = stacktrace->threads;
  while (thread)
  {
    assert(5 == btp_gdb_thread_get_frame_count(thread));
    thread = thread->next;
  }

  btp_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])

## --------------------------------- ##
## btp_gdb_stacktrace_quality_complex ##
## --------------------------------- ##
AT_TESTFUN([btp_gdb_stacktrace_quality_complex],
[[
#include <lib/gdb_stacktrace.h>
#include <lib/gdb_thread.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>

int
main(void)
{
  /* Load the stacktrace from Red Hat Bugzilla bug #621492. */
  struct btp_location location;
  btp_location_init(&location);
  char *full_input = btp_file_to_string("../../gdb_stacktraces/rhbz-621492");
  assert(full_input);
  char *input = full_input;
  struct btp_gdb_stacktrace *stacktrace = btp_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);
  assert(1.0f == btp_gdb_stacktrace_quality_complex(stacktrace));
  btp_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])

## ---------------------------------- ##
## btp_gdb_stacktrace_get_crash_frame ##
## ---------------------------------- ##
AT_TESTFUN([btp_gdb_stacktrace_get_crash_frame],
[[
#include <lib/gdb_stacktrace.h>
#include <lib/gdb_thread.h>
#include <lib/gdb_frame.h>
#include <lib/location.h>
#include <lib/utils.h>
#include <assert.h>
#include <stdio.h>

int
main(void)
{
  /* Check the crash frame of stacktrace from Red Hat Bugzilla bug #803600. */
  struct btp_location location;
  btp_location_init(&location);
  char *full_input = btp_file_to_string("../../gdb_stacktraces/rhbz-803600");
  assert(full_input);
  char *input = full_input;
  struct btp_gdb_stacktrace *stacktrace = btp_gdb_stacktrace_parse(&input, &location);
  assert(stacktrace);
  struct btp_gdb_frame *crash_frame = btp_gdb_stacktrace_get_crash_frame(stacktrace);
  puts(crash_frame->function_name);
  assert(0 == strcmp(crash_frame->function_name, "validate_row"));
  btp_gdb_frame_free(crash_frame);
  btp_gdb_stacktrace_free(stacktrace);
  return 0;
}
]])
